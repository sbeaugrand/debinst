# ---------------------------------------------------------------------------- #
## \file package.yml
## \author Sebastien Beaugrand
## \sa http://beaugrand.chez.com/
## \copyright CeCILL 2.1 Free Software license
# ---------------------------------------------------------------------------- #
stages:
  - build     # build
  - test      # test build
  - package   # build package
  - install   # install package
  - deploy    # install package from build host to docker container
  - rbuild    # build on remote (build host)
  - rtest     # test build on remote (build host)
  - rpackage  # build package on remote (build host)
  - rinstall  # install remote package on remote host
  - rdeploy   # install package from build host to target host
  - stest     # tests with remote service installed
  - xbuild    # cross build
  - xpackage  # cross build package
  - xdeploy   # install cross-builded package
  - xinstall  # install cross-compiled binary (reinstall project binary)
  - xtest     # tests with remote package or binary installed
variables:
  HOST: lubuntu
  IMAGE: ubuntu:22.10
  BUILD: Debug
  CMAKE: cmake .. -DCMAKE_BUILD_TYPE=$BUILD
  PROJECT: example
  VERSION: 1.0
  STRIP: strip
  RSYNC: rsync --checksum --delete -a --exclude=*~ --exclude=build* -i
  URI: example@ip
  SSH: vagrant ssh -c
  USERPATH: /vagrant/.vagrant
  SCPTARGET: $URI:$USERPATH/
  BDIR: build
  XCVER: 12
  XCDIR: /data
build:
  stage: build
  except:
    variables:
      - $PACKAGE =~ '/^lib/'
  script:
    - mkdir -p build
    - cd build
    - $CMAKE
    - make --no-print-directory clean
    - make --no-print-directory -j`nproc`
package:
  stage: package
  except:
    variables:
      - $PACKAGE =~ '/^lib/'
  script:
    - export DEBEMAIL=$DEBEMAIL
    - export DEBFULLNAME=$DEBFULLNAME
    - >
      test -n "$DEBFULLNAME" ||
      export DEBFULLNAME=`git config --global --get user.name`
    - >
      test -n "$DEBEMAIL" ||
      export DEBEMAIL=`git config --global --get user.email`
    - mkdir -p $BDIR/$PROJECT-$VERSION/data
    - cd $BDIR/$PROJECT-$VERSION
    - dh_make --native --single --yes || true
    - cat /dev/null >debian/$PROJECT.install
    - >
      test ! -f ../$PROJECT || cp -a ../$PROJECT data/$PROJECT &&
      echo "data/$PROJECT /usr/bin/" >>debian/$PROJECT.install
    - >
      test ! -f ../../data/$PROJECT.service ||
      echo "data/$PROJECT.service /lib/systemd/system" >>debian/$PROJECT.install
    - >
      test ! -d ../../share || ls ../../share |
      sed "s#\(.*\)#data/\1 /usr/share/$PROJECT/#" >>debian/$PROJECT.install
    - test ! -d ../../debian || cp -a ../../debian/* debian/
    - test ! -d ../../data   || cp -a ../../data/*   data/
    - test ! -d ../../share  || cp -a ../../share/*  data/
    - dpkg-buildpackage --no-sign $OPTS
install:
  stage: install
  script:
    - sudo apt-get reinstall -y ./build/${PROJECT}_${VERSION}_amd64.deb
deploy:
  image: $IMAGE
  stage: deploy
  script:
    - PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST/.vagrant/$PROPATH
    - cp -a build/${PROJECT}_${VERSION}_amd64.deb ../../../$PROPATH/build/
    - test -z "$DEP" || cp -a $DEP ../../../$PROPATH/build/
    - cd -
    - apt update
    - apt-get install -y $DEP ./build/${PROJECT}_${VERSION}_amd64.deb
    - ldd -d -r /usr/bin/$PROJECT
rbuild:
  stage: rbuild
  script:
    - PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - $RSYNC ../$PROPATH/ .vagrant/$PROPATH/
    - $RSYNC ../makefiles/ .vagrant/makefiles/
    - >
      $SSH "cd $USERPATH/$PROPATH &&
      make build BUILD=$BUILD CMAKE='$CMAKE' &&
      (test $BUILD = Debug || $STRIP build/$PROJECT)"
rtest:
  stage: rtest
  before_script:
    - PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - $RSYNC ../$PROPATH/ .vagrant/$PROPATH/
    - $RSYNC ../makefiles/ .vagrant/makefiles/
    - $SSH "cd $USERPATH/$PROPATH && build/$PROJECT" &
    - sleep 1
    - IP=`make --no-print-directory get-ip`
    - cd -
rpackage:
  stage: rpackage
  script:
    - PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - $RSYNC ../$PROPATH/ .vagrant/$PROPATH/
    - $RSYNC ../makefiles/ .vagrant/makefiles/
    - $SSH "cd $USERPATH/$PROPATH && make package"
rinstall:
  stage: rinstall
  script:
    - PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - >
      $SSH "cd $USERPATH/$PROPATH &&
      sudo apt-get reinstall -y ./build/${PROJECT}_${VERSION}_amd64.deb"
rdeploy:
  stage: rdeploy
  variables:
    BHOST: $HOST
  script:
    - PROPATH=$(basename `readlink -f .`)
    - test -n "$XC" || BDIR=.vagrant/$PROPATH/build
    - test -n "$XC" || cd ../$BHOST
    - >
      test ! -f ~/.ssh/id_rsa || test -d /run/lock/.keychain ||
      TMPDIR=/run/lock keychain --dir /run/lock --nogui ~/.ssh/id_rsa
    - test ! -f ~/.ssh/id_rsa || source /run/lock/.keychain/*-sh
    - scp $BDIR/${PROJECT}_${VERSION}_*.deb $SCPTARGET
    - test -n "$SUDOPASS" || read -s SUDOPASS
    - >
      $SSH "! systemctl -q is-active $PROJECT ||
      echo $SUDOPASS | sudo -S -p \"wait\" systemctl stop $PROJECT"
    - >
      $SSH "cd $USERPATH && echo $SUDOPASS | sudo -S
      apt-get install --reinstall -y ./${PROJECT}_${VERSION}_*.deb &&
      ldd -d -r /usr/bin/$PROJECT"
stest:
  stage: stest
  before_script:
    - cd ../$HOST
    - IP=`make --no-print-directory get-ip`
    - cd -
xbuild:
  stage: xbuild
  script:
    - test -n "$XC" || XC=aarch64-linux-gnu
    - mkdir -p build-$XC
    - cd build-$XC
    - $CMAKE -DXC=$XC -DXCVER=$XCVER -DXCDIR=$XCDIR
    - make --no-print-directory clean
    - make --no-print-directory -j`nproc`
xpackage:
  stage: xpackage
  extends: package
  before_script:
    - test -n "$XC" || XC=aarch64-linux-gnu
    - BDIR=build-$XC
    - CONFIG_SITE=/etc/dpkg-cross/cross-config.arm64
    - test "$XC" != "aarch64-linux-gnu" || OPTS="-aarm64"
    - test "$XC" != "arm-linux-gnueabihf" || OPTS="-aarmhf"
    - export DEB_BUILD_OPTIONS=nocheck
    - export XC XCVER XCDIR
xdeploy:
  stage: xdeploy
  extends: rdeploy
  before_script:
    - test -n "$XC" || XC=aarch64-linux-gnu
    - BDIR=build-$XC
xinstall:
  stage: xinstall
  variables:
    BLIST: $PROJECT
  script:
    - test -n "$XC" || XC=aarch64-linux-gnu
    - BDIR=build-$XC
    - >
      test ! -f ~/.ssh/id_rsa || test -d /run/lock/.keychain ||
      TMPDIR=/run/lock keychain --dir /run/lock --nogui ~/.ssh/id_rsa
    - test ! -f ~/.ssh/id_rsa || source /run/lock/.keychain/*-sh
    - cd $BDIR
    - scp $BLIST $SCPTARGET
    - test -n "$SUDOPASS" || read -s SUDOPASS
    - >
      $SSH "cd $USERPATH && echo $SUDOPASS | sudo -S
      cp $BLIST /usr/bin/ &&
      ldd -d -r /usr/bin/$PROJECT"
xtest:
  stage: xtest
  before_script:
    - cd ../$HOST
    - $SSH "/usr/bin/$PROJECT" &
    - sleep 2
    - IP=`make --no-print-directory get-ip`
    - cd -
