# ---------------------------------------------------------------------------- #
## \file package.yml
## \author Sebastien Beaugrand
## \sa http://beaugrand.chez.com/
## \copyright CeCILL 2.1 Free Software license
# ---------------------------------------------------------------------------- #
stages:
  - build
  - test
  - package
  - install
  - deploy
  - rbuild
  - rtest
  - rpackage
  - rinstall
  - rdeploy
variables:
  HOST: lubuntu
  IMAGE: ubuntu:22.10
  BUILD: Debug
  CMAKE: cmake .. -DCMAKE_BUILD_TYPE=$BUILD
  PROJECT: $(shell basename `readlink -f .`)
  VERSION: 1.0
  STRIP: strip
  RSYNC: rsync --checksum --delete -a --exclude=*~ --exclude=build -i
  SSH: vagrant ssh -c
  USERPATH: /vagrant/.vagrant
  URI: example@ip
  SCPTARGET: $URI:$USERPATH/
build:
  stage: build
  except:
    variables:
      - $PACKAGE =~ '/^lib/'
  script:
    - mkdir -p build
    - cd build
    - $CMAKE
    - make --no-print-directory clean
    - make --no-print-directory -j`nproc`
package:
  stage: package
  except:
    variables:
      - $PACKAGE =~ '/^lib/'
  script:
    - export DEBEMAIL=`git config --global --get user.email`
    - export DEBFULLNAME=`git config --global --get user.name`
    - mkdir -p build/$PROJECT-$VERSION/data
    - cd build/$PROJECT-$VERSION
    - dh_make --native --single --yes || true
    - echo "data/$PROJECT /usr/bin/" >debian/$PROJECT.install
    - cp -a ../$PROJECT data/$PROJECT
    - test ! -d ../../debian || cp -a ../../debian/* debian/
    - dpkg-buildpackage --no-sign
install:
  stage: install
  script:
    - sudo apt-get reinstall -y ./build/${PROJECT}_${VERSION}_amd64.deb
deploy:
  image: $IMAGE
  stage: deploy
  script:
    - export PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST/.vagrant/$PROPATH
    - cp -a build/${PROJECT}_${VERSION}_amd64.deb ../../../$PROPATH/build/
    - test -z "$DEP" || cp -a $DEP ../../../$PROPATH/build/
    - cd -
    - apt update
    - apt-get install -y $DEP ./build/${PROJECT}_${VERSION}_amd64.deb
    - ldd -d -r /usr/bin/$PROJECT
rbuild:
  stage: rbuild
  script:
    - export PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - $RSYNC ../$PROPATH/ .vagrant/$PROPATH/
    - $RSYNC ../makefiles/ .vagrant/makefiles/
    - |
      $SSH "cd $USERPATH/$PROPATH &&
      make build BUILD=$BUILD CMAKE='$CMAKE' &&
      (test $BUILD = Debug || $STRIP build/$PROJECT)"
rtest:
  stage: rtest
  before_script:
    - export PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - $RSYNC ../$PROPATH/ .vagrant/$PROPATH/
    - $RSYNC ../makefiles/ .vagrant/makefiles/
    - cd -
rpackage:
  stage: rpackage
  script:
    - export PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - $RSYNC ../$PROPATH/ .vagrant/$PROPATH/
    - $RSYNC ../makefiles/ .vagrant/makefiles/
    - $SSH "cd $USERPATH/$PROPATH && make package"
rinstall:
  stage: rinstall
  script:
    - export PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - |
      $SSH "cd $USEPATH/$PROPATH &&
      sudo apt-get reinstall -y ./build/${PROJECT}_${VERSION}_amd64.deb"
rdeploy:
  stage: rdeploy
  script:
    - export PROPATH=$(basename `readlink -f .`)
    - cd ../$HOST
    - scp .vagrant/$PROPATH/build/${PROJECT}_${VERSION}_amd64.deb $SCPTARGET
    - |
      $SSH "cd $USERPATH &&
      sudo apt-get reinstall -y ./${PROJECT}_${VERSION}_amd64.deb
      ldd -d -r /usr/bin/$PROJECT"
